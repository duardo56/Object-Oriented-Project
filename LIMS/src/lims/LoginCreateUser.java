/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lims;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author reticent
 */
public class LoginCreateUser extends javax.swing.JFrame {

    /**
     * Creates new LoginCreateUser form
     */
    public LoginCreateUser() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtUsername = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        txtPassword = new javax.swing.JPasswordField();
        btnCreateUser = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        txtFirstName = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        txtLastName = new javax.swing.JTextField();
        btnExit = new javax.swing.JButton();
        cbManagement = new javax.swing.JCheckBox();
        cbAnalysis = new javax.swing.JCheckBox();
        cbClient = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Create New Login");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Username"));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));
        jPanel1.add(txtUsername);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Password"));
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));
        jPanel2.add(txtPassword);

        btnCreateUser.setText("Create");
        btnCreateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateUserActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("First Name"));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));
        jPanel3.add(txtFirstName);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Last Name"));
        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.LINE_AXIS));
        jPanel4.add(txtLastName);

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        cbManagement.setText("Management");
        cbManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbManagementActionPerformed(evt);
            }
        });

        cbAnalysis.setText("Analysis");
        cbAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAnalysisActionPerformed(evt);
            }
        });

        cbClient.setText("Client");
        cbClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbClientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnCreateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbManagement)
                        .addGap(18, 18, 18)
                        .addComponent(cbAnalysis)
                        .addGap(18, 18, 18)
                        .addComponent(cbClient)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbManagement)
                    .addComponent(cbAnalysis)
                    .addComponent(cbClient))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateUser)
                    .addComponent(btnExit))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Exit button
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
            this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    //Creates button action event handler
    private void btnCreateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateUserActionPerformed
        
        /*
            Work in Progress - Need to implement a way to save Usernames and files into the same object
            and find a way to distinguish whether or not a username already exist within the system.
                1) A way to save files as objects
                2) A way to read through the files and check uernames
        
            ****UPDATE 03/29/2016****
        Idea: implement System and User class here in order to create User objects and store them 
        using serialization. 
        */
        
        //If checkBox is set to Analysis
        if (getCheckBox().equals("Analysis")){
            
            //Checks if text boxes are empty
            if(checkEmptyTxtBoxes()){
                
                //Username does not exist
                if (!checkUsername(txtUsername.getText().toLowerCase())){
                    try {
                        createNewUser(getCheckBox());
                    } catch (IOException ex) {
                        Logger.getLogger(LoginCreateUser.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    this.dispose(); //Closes this form
                }
            }
        }
        
        //If checkBox is set to Management
        else if(getCheckBox().equals("Management")){
            
            //Checks if text boxes are empty
            if (checkEmptyTxtBoxes()){
                
                //Username does not exist
                 if (!checkUsername(txtUsername.getText().toLowerCase())){
                     try {
                         createNewUser(getCheckBox());
                     } catch (IOException ex) {
                         Logger.getLogger(LoginCreateUser.class.getName()).log(Level.SEVERE, null, ex);
                     }
                    this.dispose(); //Closes this form
                }
            }
        }
        
        //If checkBox is set to Client
        else if (getCheckBox().equals("Client")){
            
            //Checks if text boxes are empty
            if (checkEmptyTxtBoxes()){
                
                //Username does not exist
                if (!checkUsername(txtUsername.getText().toLowerCase())){
                    try {
                        createNewUser(getCheckBox());
                    } catch (IOException ex) {
                        Logger.getLogger(LoginCreateUser.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    this.dispose(); //Closes this form
                }
            }
        }
        
        //If no checkBox are present
        else if (getCheckBox().equals("none")){
            javax.swing.JOptionPane.showMessageDialog(null, "Please select one of the check boxes.");
        }
    }//GEN-LAST:event_btnCreateUserActionPerformed

    //Management Checkbox
    private void cbManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbManagementActionPerformed
        switchBoxChecking(evt.getActionCommand());
    }//GEN-LAST:event_cbManagementActionPerformed

    //Analysis Checkbox
    private void cbAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAnalysisActionPerformed
        switchBoxChecking(evt.getActionCommand());
    }//GEN-LAST:event_cbAnalysisActionPerformed

    //Client Checkbox
    private void cbClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbClientActionPerformed
        switchBoxChecking(evt.getActionCommand());
    }//GEN-LAST:event_cbClientActionPerformed
   
    
    //If there is more than 1 checkbox checked, it will deactive the rest and turn on current
    private void switchBoxChecking(String evt){
        
        //if event is equal to Management, set the other buttons to false
        if (evt.equals("Management")){
            cbClient.setSelected(false);
            cbAnalysis.setSelected(false);
        }
        
        //if event is equal to Analysis, set the other buttons to false
        else if(evt.equals("Analysis")){
            cbManagement.setSelected(false);
            cbClient.setSelected(false);
        }
        
        //if event is equal to Client, set the other buttons to false
        else if (evt.equals("Client")){
            cbManagement.setSelected(false);
            cbAnalysis.setSelected(false);
        }
    }
    
    //Check what current User CheckBox is selected and returns that as a string
    private String getCheckBox(){
        
        if (cbClient.isSelected()){
            return "Client";
        }
        else if (cbManagement.isSelected()){
            return "Management";
        }
        else if(cbAnalysis.isSelected()){
            return "Analysis";
        }
        else{
            return "none";
        }
    }
    
    //Check whether or not the textboxes are empty
    private boolean checkEmptyTxtBoxes(){
        //Checks UserName
        if (txtUsername.getText().length() != 0){
            
            //Checks Password
            if (txtPassword.getPassword().length !=0){
                
                //Checks FirstName
                if (txtFirstName.getText().length() != 0){
                    
                    //Checks LastName
                    if(txtLastName.getText().length() != 0){
                        return true;
                    }
                    
                    else{
                        javax.swing.JOptionPane.showMessageDialog(null, "Please enter your last name.");
                        return false;   //Returns false if last name is empty
                    }
                }
                else{
                    javax.swing.JOptionPane.showMessageDialog(null, "Please enter your first name.");
                    return false;   //Returns false if first name is empty;
                }
            }
            else{
                javax.swing.JOptionPane.showMessageDialog(null, "Please enter a password.");
                return false;   //Returns false if password is empty;  
            }   
        }
        else{
            javax.swing.JOptionPane.showMessageDialog(null, "Please enter a username.");
            return false;   //Returns false if username is empty;
        }
    }
    
    //Method to check whether or not username has been taken
    private boolean checkUsername(String username){
        try{
            
        //Retrieves UserList.bin 
        FileInputStream fInput = new FileInputStream("UserListTest");
        ObjectInputStream ois = new ObjectInputStream(fInput);
        list = (UserList)ois.readObject(); 
        
        //If user exist
        if (!list.checkUser(username)){
            return false;    //return true
        }
        else{
            javax.swing.JOptionPane.showMessageDialog(null, "Username Exist - Please try another username.");
            return true;
        }
        
        }
        catch (FileNotFoundException e){
            javax.swing.JOptionPane.showMessageDialog(null,"Can't find UserList.bin text file");
        }
        catch (IOException e){
            javax.swing.JOptionPane.showMessageDialog(null,"Error reading UserList.bin file");
        }
        catch (ClassNotFoundException e){
            javax.swing.JOptionPane.showMessageDialog(null,"Error reading UserList.bin file");
        }
        return false;
    }
    
    //Create new user method
    private void createNewUser(String status) throws FileNotFoundException, IOException{
        
        char [] temp = txtPassword.getPassword();   //Holds password in an array of characters
        String password = new String(temp); //Holds password as String
        
        //Adds user to UserList
        list.addUser(txtUsername.getText().toLowerCase(), password , 
                     txtFirstName.getText(), txtLastName.getText(), status);
        
        
        //Saves
	ObjectOutputStream outStream = new ObjectOutputStream(new FileOutputStream("UserListTest"));
	outStream.writeObject(list);
        
        //Displays user a message saying it was successful in creating a new user
        javax.swing.JOptionPane.showMessageDialog(null, "User Successfully created.");
    }
    
    //Declared Variables
    private UserList list;   //Holds UserList object
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateUser;
    private javax.swing.JButton btnExit;
    private javax.swing.JCheckBox cbAnalysis;
    private javax.swing.JCheckBox cbClient;
    private javax.swing.JCheckBox cbManagement;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
