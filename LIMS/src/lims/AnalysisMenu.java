/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lims;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;
import java.util.Random;

/**
 *
 * @author reticent
 */
public class AnalysisMenu extends javax.swing.JFrame {

    /**
     * Creates new form AnalysisMenu
     */
    public AnalysisMenu(){
        
        //Initializes GUI
        initComponents();
        
        lc.connect("localhost", 8765); //connects to server 
        
        
        
        username = "Number2";
        
        //Reads UserListTest and SampleFileList file 
        //and store into UserList list object and SampleFileList object
        try{
            FileInputStream fInput = new FileInputStream("UserListTest");
            ObjectInputStream ois = new ObjectInputStream(fInput);
            list = (UserList)ois.readObject();
            
             userID = list.getUser(username).getUserID();    //Gets userID
            
            fInput = new FileInputStream("SampleFileList");
            ois = new ObjectInputStream(fInput);
            sampleList =  (SampleFileList)ois.readObject();
            
        }
        catch (FileNotFoundException e){
            e.printStackTrace();
        }
        catch (IOException e){
            e.printStackTrace();
        }
        catch(ClassNotFoundException e){
            e.printStackTrace();
        }
        
        fillSampleTable(); //call method here 
    }
    
    //Constructor
    public AnalysisMenu(int id) {
         lc.connect("localhost", 8765);
        fileList = lc.retriveAnalysisFiles(id);
        userID = id; 
        //Initializes GUI
        initComponents();
        
       
        
        
        
        //Reads UserListTest and SampleFileList file 
        //and store into UserList list object and SampleFileList object
        try{
            FileInputStream fInput = new FileInputStream("UserListTest");
            ObjectInputStream ois = new ObjectInputStream(fInput);
            list = (UserList)ois.readObject();
            
            userID = list.getUser(username).getUserID();    //Gets userID
            
            fInput = new FileInputStream("SampleFileList");
            ois = new ObjectInputStream(fInput);
            sampleList =  (SampleFileList)ois.readObject();
            
        }
        catch (FileNotFoundException e){
        }
        catch (IOException | ClassNotFoundException e){
        }
        
        fillSampleTable(); //call method here 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SampleView = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        btnGetSample = new javax.swing.JButton();
        btnSend = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lFidelity = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblTestResult = new javax.swing.JLabel();
        lblSampleID = new javax.swing.JLabel();
        lblSampleType = new javax.swing.JLabel();
        lblExpFidelity = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblFidelity1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnCalc = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAnalystSample = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemLogout = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(640, 400));

        SampleView.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        btnGetSample.setText("Get Sample");
        btnGetSample.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetSampleActionPerformed(evt);
            }
        });

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Sample Id:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, -1, -1));
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, -1, 20));

        lFidelity.setText("Fidelity :");
        jPanel3.add(lFidelity, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, -1, -1));

        jLabel4.setText("Expected Fielity: ");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 110, -1, -1));

        jLabel5.setText("Sample Type:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, -1, -1));

        lblTestResult.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel3.add(lblTestResult, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 190, 280, 20));

        lblSampleID.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel3.add(lblSampleID, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 30, 280, 20));

        lblSampleType.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel3.add(lblSampleType, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 70, 280, 20));

        lblExpFidelity.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel3.add(lblExpFidelity, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 110, 280, 20));

        jLabel7.setText("%");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 150, 10, -1));

        jLabel8.setText("%");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 110, 10, -1));

        lblFidelity1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel3.add(lblFidelity1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 150, 280, 20));

        jLabel9.setText("Test Result:");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 190, -1, -1));

        btnCalc.setText("Calclulate Fidelity");
        btnCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcActionPerformed(evt);
            }
        });

        jLabel1.setText("Calculate the sample fidelity here ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(btnGetSample)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCalc)
                .addGap(273, 273, 273)
                .addComponent(btnSend)
                .addGap(91, 91, 91))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(69, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(379, 379, 379))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 892, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(11, 11, 11)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGetSample)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSend)
                        .addComponent(btnCalc)))
                .addGap(53, 53, 53))
        );

        SampleView.addTab("Analysis", jPanel2);

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jLabel6.setText("Current List of Samples");

        tblAnalystSample.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sample ID", "Status", "Test Type", "Expected Fieleity", "Due Date ", "Sent Date ", "Recieved Date", "Completed Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAnalystSample.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAnalystSampleMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblAnalystSample);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 996, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 43, Short.MAX_VALUE))
        );

        SampleView.addTab("View Sample", jPanel1);

        jMenu1.setText("Menu");

        jMenuItemLogout.setText("Logout");
        jMenuItemLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLogoutActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemLogout);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SampleView))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SampleView)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Closes current AnalysisMenu window and opens LoginMenu
    private void jMenuItemLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLogoutActionPerformed
        this.dispose();
        LoginMenu window = new LoginMenu();
        window.setVisible(true);
    }//GEN-LAST:event_jMenuItemLogoutActionPerformed

    //Closes the program when exit from Menu is clicked
    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void tblAnalystSampleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAnalystSampleMouseClicked
    //switch back to first panel
    SampleView.setSelectedIndex(0);
        
     int tmp = tblAnalystSample.getSelectedRow();
     samplefiles =  sampleList.getUserSpecificSampleFile((int) tblAnalystSample.getValueAt(tmp, 0)); //retrive the values of the sample id 
     
     int sampleId = samplefiles.getSampleID();  //to hold the sample id 
     double expfid = samplefiles.getExpectedFidelity();
     double fidilety = samplefiles.getFidelity();
     
     //converted some values to string 
     
    lblSampleID.setText(Integer.toString(sampleId)); //to display on label
    lblSampleType.setText(samplefiles.getTestType());
    lblExpFidelity.setText(Double.toString(expfid));
    lblTestResult.setText(Double.toString(fidilety)); 
  
        
    }//GEN-LAST:event_tblAnalystSampleMouseClicked

    private void btnGetSampleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetSampleActionPerformed
        //automatically swithc tabs
        SampleView.setSelectedIndex(1);
   
      
    }//GEN-LAST:event_btnGetSampleActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
    saveSampleFile(); //update the table 
    javax.swing.JOptionPane.showMessageDialog(null, "Sucessful Submission.");
    lblSampleID.setText("");    
    lblSampleType.setText("");
    lblExpFidelity.setText("");
    lblTestResult.setText("");

    
    }//GEN-LAST:event_btnSendActionPerformed
    private void btnCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcActionPerformed
      // String testType; //to determine the test type 
         double fidelity;
         double density_Gas = 719.7;
         double density_water = 1000;
         double density_soil = 2000;
         double density_oil = 862;
         double density_metal = 2830;
         double tmp_prep;
         
        
        if(null != lblSampleType.getText())
        switch (lblSampleType.getText()) {
            case "Gas":
                tmp_prep = prepFactor(); //new instance 
                //equation goes here
                fidelity = ((density_Gas - tmp_prep) / tmp_prep) * 100 ;
                lblTestResult.setText(Double.toString(fidelity));
                
                err_calc(fidelity);
                test_pass(err_calc(fidelity));
                return_result(test_pass(err_calc(fidelity)));
                
                
                break;
            case "Water":
                tmp_prep = prepFactor(); //new instance 
                fidelity = ((density_water - tmp_prep) / tmp_prep) * 100 ;
                lblTestResult.setText(Double.toString(fidelity));
                
                err_calc(fidelity);
                test_pass(err_calc(fidelity));
                return_result(test_pass(err_calc(fidelity)));
                
                break;
            case "Soil":
                tmp_prep = prepFactor(); //new instance 
                fidelity = ((density_soil - tmp_prep) / tmp_prep) * 100 ;
                lblTestResult.setText(Double.toString(fidelity));
                
                err_calc(fidelity);
                test_pass(err_calc(fidelity));
                return_result(test_pass(err_calc(fidelity)));
                
                break;
            case "Oil":
                tmp_prep = prepFactor(); //new instance 
                fidelity = ((density_oil - tmp_prep) / tmp_prep) * 100 ;
                lblTestResult.setText(Double.toString(fidelity));
              
                 err_calc(fidelity);
                 test_pass(err_calc(fidelity));
                 return_result(test_pass(err_calc(fidelity)));       
                break;
            case "Metal":
                tmp_prep = prepFactor(); //new instance 
                fidelity = ((density_metal - tmp_prep) / tmp_prep) * 100 ;
                lblTestResult.setText(Double.toString(fidelity));
                
                
                err_calc(fidelity);
                test_pass(err_calc(fidelity));
                return_result(test_pass(err_calc(fidelity)));
                break;
            default:
              lblSampleType.setText("");
                break;
        }
        
    }//GEN-LAST:event_btnCalcActionPerformed

    //Populate the Jlist with Samples
    private void fillSampleTable (){
        DefaultTableModel tbl = (DefaultTableModel) tblAnalystSample.getModel();
        
        tbl.setRowCount(0); //Set model row count = 0

        list.getUser(username); 
        
        for (int i = 0; i < fileList.size(); i++) {
                int ID = fileList.get(i).getSampleID(); 
                String getStatus = fileList.get(i).getStatus();
                String testType = fileList.get(i).getTestType();
                double expFidelity = fileList.get(i).getExpectedFidelity();
                String dueDate = fileList.get(i).getDueDate();
                String sentDate = fileList.get(i).getSentDate();
                String recievedDate = fileList.get(i).getReceivedDate();
                String compDate = fileList.get(i).getCompletedDate();
                
                Object [] arr = {ID, getStatus, testType, expFidelity, dueDate, sentDate, recievedDate, compDate}; 
                tbl.addRow(arr);
                
                
        }
        tblAnalystSample.setModel(tbl);
    }
    
    
        private void saveSampleFile(){
        //Saves Files
        try{
            //Saves SampleFileList.bin
            File file = new File("SampleFileList");
            OutputStream fileOutputStream = new FileOutputStream(file);
            ObjectOutput outputStream = new ObjectOutputStream(fileOutputStream);
            outputStream.writeObject(sampleList);
        }
        catch (FileNotFoundException e){
            e.printStackTrace();
        }
        catch (IOException e){
            e.printStackTrace();
        }
    }
        
        private double prepFactor()
        {
            double prep;
            if(generate_finalV() >= genrate_initialV()){
                generate_finalV(); //generate new values
                genrate_initialV();
                prepFactor();  //call itself again 
            }
             prep = generate_finalV() / genrate_initialV()* 100; 
            return prep;
        }
        
        private double err_calc(double test_result)
        {
            double result;
            double exp_fid;
              exp_fid =  (Double) tblAnalystSample.getValueAt(tblAnalystSample.getSelectedRow(), 3);
        
             result = ((test_result - exp_fid)/ exp_fid ) * 100 ;
        
            return result;
        }
        
        private boolean test_pass(double result )
        {
        return result >= 10;
        }
        
        private void return_result(boolean result){
            if( result == true){
                lblTestResult.setText("PASSED");
            }
            else
            {
                lblTestResult.setText("FAILED");
            }
            
        }
        private double generate_finalV(){
            return seed.nextDouble() * 100;
        }
        
        private double genrate_initialV(){
            return seed.nextDouble() * 100;  
        }
    
    //Declared variable
    private UserList list;  //Holds UserList object
    private int userID;
    private DefaultListModel listModel;
    private SampleFileList sampleList; //Holds SampleFileList
    private String username;
    private SampleFile samplefiles;
    private User clientInfo; 
    private ClientUser userClient;
    private ArrayList <Integer> idHolder =  new ArrayList <Integer>(); //hold the changed sample  
    private Random seed;  //object for random variable 
    private ArrayList  <SampleFile> fileList ; 
    private LIMSClient lc ;

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane SampleView;
    private javax.swing.JButton btnCalc;
    private javax.swing.JButton btnGetSample;
    private javax.swing.JButton btnSend;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemLogout;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lFidelity;
    private javax.swing.JLabel lblExpFidelity;
    private javax.swing.JLabel lblFidelity1;
    private javax.swing.JLabel lblSampleID;
    private javax.swing.JLabel lblSampleType;
    private javax.swing.JLabel lblTestResult;
    private javax.swing.JTable tblAnalystSample;
    // End of variables declaration//GEN-END:variables
}
